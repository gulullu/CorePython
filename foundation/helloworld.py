# !/usr/bin/python# Filename : helloworld.py# user = raw_input('Enter login name: ')# print 'Your logoin is:', user# num = raw_input('Now enter a number: ')# print 'Doubling your number: %d' % (int(num) * 2)# print 3 < 4 and 4 < 5counter = 0miles = 1000.0name = 'Bob'counter += 1kilometers = 1.609 * milesprint '%f miles is the same as %f km' % (miles, kilometers)pystr = 'Python'iscool = 'is cool!'print pystr[0]print pystr[2:5]print iscool[:2]print iscool[3:]print iscool[-1]print pystr + iscoolprint pystr * 2print '-' * 20pystr = '''pystr   is cool'''print pystraList = [1, 2, 3, 4]print aListprint aList[0]print aList[2:]print aList[:3]aList[1] = 5print aListaTuple = ('robots', 77, 93, 'try')print aTupleprint aTuple[:3]# aTuple[1] = 10aDict = {'host': 'earth'}  # create dictaDict['port'] = 80  # add to dictprint aDictprint aDict.keys()print aDict['host']for key in aDict:    print key, aDict[key]counter = 0while counter < 3:    print 'loop #%d' % (counter)    counter += 1print 'I like to use the Internet for:'for item in ['email', 'net-surfing', 'homework', 'chat']:    print item,    printwho = 'knights'what = 'Ni!'print 'We are the', who, 'who say', what, what, what, whatprint 'We are the %s who say %s' % \    (who, (what + ' ') * 4)for eachNum in range(3):    print eachNumfoo = 'abc'for i in range(len(foo)):    print foo[i], '(%d)' % ifor i, ch in enumerate(foo):    print ch, '(%d)' % isquared = [x ** 2 for x in range(4)]for i in squared:    print isqdEvents = [x ** 2 for x in range(8) if not x % 2]for i in sqdEvents:    print i# filename = raw_input('Enter file name: ')# fobj = open(filename, 'r')# for eachLine in fobj:#    print eachLine,# fobj.close()# try:# 	filename = raw_input('Enter file name: ')# 	fobj = open(filename, 'r')# 	for eachLine in fobj:# 		print eachLine, fobj.close()# except IOError, e:# 	print 'file open error: ', edef addMe2Me(x):    'apply + operation to argument'    return (x + x)print addMe2Me(4.25)print addMe2Me('Python')def foo(debug=True):    'determine if in debug mode with default argument'    if debug:        print 'in debug mode'        print 'done'foo(False)class FooClass(object):    """my very first class: FooClass"""    version = 0.1  # class (data) attribute    def __init__(self, nm='John Doe'):        super(FooClass, self).__init__()        self.name = nm  # class instance (data) attribute        print 'Created a class instance for', nm    def showname(self):        """display instance attribute and class name"""        print 'Your name is ', self.name        print 'My name is ', self.__class__.__name__    def showver(self):        """display class(static) attribute"""        print self.version  # references FooClass.version    def addMe2Me(self, x):  # does not use 'self'        """apply + operation to argument"""        return x + xfoo1 = FooClass()foo1.showname()foo1.showver()print foo1.addMe2Me(5)print foo1.addMe2Me('xyz')foo2 = FooClass('Jane Smith')foo2.showname()import syssys.stdout.write('Hello World!\n')print sys.platformprint sys.versionimport sysx = 'foo'sys.stdout.write(x + '\n')x, y, z = 1, 2, 'a string'print xprint yprint zx, y = 1, 2x, y = y, xprint xprint yimport thisprint type(42)print type(type(42))foostr = '01abcde'print foostr[::-1]print foostr[::-2]a = [5, 'hat', -9.3]b = aprint a is bprint a is not bb = 2.5e-5print bprint a is bprint a is not b